// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    output        = "./generated/client"
    binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

enum Units {
    GRAM
    LITER
    PIECE
    TEASPOON
    TABLESPOON
    PINCH
    DROP
}

enum Role {
    USER
    ADMIN
}

model Recipe {
    id          String   @id @default(cuid())
    name        String
    plateCount  Int      @default(8)
    image       String?
    imageName   String?
    createdBy   User     @relation(fields: [createdById], references: [id])
    createdById String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    steps       Step[]
    ingredients Ingredient[]

    @@index([name])
}

model Step {
    id          String   @id @default(cuid())
    description String
    index       Int
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    recipeId String
}

model Food {
    id        String   @id @default(cuid())
    name      String   @unique
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    density      Float? // g/cm3
    massPerPiece Float?
    unit         Units

    ingredients Ingredient[]
}

model Ingredient {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    quantity Float

    index Int

    food     Food   @relation(fields: [foodName], references: [name], onDelete: Cascade)
    foodName String

    recipe   Recipe @relation(fields: [recipeId], references: [id], onDelete: Cascade)
    recipeId String

    @@unique([recipeId, index])
    @@unique([recipeId, foodName])
}

// Necessary for Next auth
model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role      @default(USER)
    accounts      Account[]
    sessions      Session[]
    Recipe        Recipe[]

    createdat DateTime @default(now())
    updatedat DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@id([identifier, token])
}
